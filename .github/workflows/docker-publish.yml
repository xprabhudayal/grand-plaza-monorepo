# .github/workflows/docker-publish.yml

name: Build and Push Multi-Architecture Docker Image

# This workflow runs only when pushing to 'main' branch with commit message starting with "[BUILD]"
on:
  push:
    branches: ["main"]

jobs:
  build_and_push:
    # The job will run on a standard GitHub-hosted runner (which is x86/amd64)
    runs-on: ubuntu-latest
    
    # Grant permissions for the job to write to GitHub Packages (GHCR)
    permissions:
      contents: read
      packages: write
      
    # Only run if pushing to main AND commit message starts with "[BUILD]"
    if: |
      github.ref == 'refs/heads/main' &&
      startsWith(github.event.head_commit.message, '[BUILD]')

    steps:
      # 1. Check out your repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up QEMU for multi-architecture builds
      # This allows the x86 runner to emulate an ARM CPU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Set up Docker Buildx
      # This creates a builder instance that can handle multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 5. Log in to GitHub Container Registry (GHCR)
      # Uses a temporary token that GitHub provides for the job
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # 'github.actor' is your GitHub username. The GITHUB_TOKEN is a secret automatically provided by GitHub.
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 6. Build the image for both platforms and push it
      # This is the core step that performs the multi-arch build
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Tells Buildx to build for both AMD64 (x86) and ARM64
          platforms: linux/amd64,linux/arm64
          # Pushes the final image to the registry
          push: true
          # Creates the tag for your image. Example: ghcr.io/your-username/your-repo-name:latest
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
          # Enable build cache
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # 7. Move cache to avoid permission issues
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

